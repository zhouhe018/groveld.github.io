<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title type="text" xml:lang="en">Martin Groeneveld</title>
  <link rel="self" type="application/atom+xml" href="https://www.groveld.com/atom.xml"/>
  <link rel="alternate" href="https://www.groveld.com/"/>
  <updated>2019-12-09T11:06:01+00:00</updated>
  <id>https://www.groveld.com/</id>
  <author>
    <name>Martin Groeneveld</name>
    <email>martin@groveld.com</email>
  </author>
  <rights type="text">Copyright (c) 2019, Martin Groeneveld; all rights reserved.</rights>
  
  <entry>
    <id>https://www.groveld.com/articles/group-policy-processing</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/group-policy-processing"/>
    <title>Understanding Group Policy Processing</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2018-10-09T00:00:00+00:00</published>
    <updated>2018-10-09T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p><strong>Group Policy Processing</strong>: You can have local policies, site policies, domain policies, and OU policies within your domain structure. To learn how to best implement Group Policies to serve the organization, you need to understand the order in which the policies are applied.</p>

<p>Nonlocal <a href="https://en.wikipedia.org/wiki/Group_Policy">GPOs</a> are created in Active Directory and linked to container objects. Nonlocal <a href="https://en.wikipedia.org/wiki/Group_Policy">GPOs</a> can be linked to Active Directory sites, domains, or OUs. They cannot be linked to built-in containers, such as the default Users, Builtin, or Computer containers. These containers can receive policies only through domain or site-linked policies that flow down to all objects within them.</p>

<h2 id="understating-group-policy-processing">Understating Group Policy Processing</h2>

<p>Policies affect the containers to which they are linked in the following ways:</p>

<ul>
  <li>Site-linked policies affect all domains within a site.</li>
  <li>Domain-linked policies affect all users and computers within a domain and within any containers within a domain. This includes objects in built-in containers, as well as objects within OUs and sub-OUs within the domain structure.</li>
  <li>OU-linked policies affect all objects within the OU and any other OU structure nested within them.</li>
</ul>

<p>To begin, policies are processed in the following order, typically referred as <strong>LSDOU</strong>:</p>

<ol>
  <li>Local Policies</li>
  <li>Site policies</li>
  <li>Domain policies</li>
  <li>OU policies</li>
</ol>

<p>Following the order of processing from steps 1 to 4, the settings in the policies that are processed last, that is, those that are assigned to an OU in step 4, override any conflicting settings in the policies that were processed in the previous steps.</p>

<p>For example, suppose you have a policy setting that is applied to the site and affects all domains and their contents. If you have modified the same settings to produce a different result in an OU policy, the OU policy settings prevail. This behavior is intentional and provides administrators with flexibility in Group Policy application. In addition, as policies are applied, each container inherits the settings of the parent container policies by default.</p>

<p>Domains, sites, and OUs can have multiple group policies linked to them. Expanding on the previous example, you might have more than one policy linked to the Education department’s OU. In this situation, the top GPO in the list is processed last. When multiple <a href="https://en.wikipedia.org/wiki/Group_Policy">GPOs</a> are linked to a container, the first GPO in the list has the highest priority. In other words, by default, the list of linked <a href="https://en.wikipedia.org/wiki/Group_Policy">GPOs</a> is processed from the bottom to the top.</p>

<p>Policies can be applied to containers and the user and computer objects that reside in them. Computer configuration settings are processed when a computer starts, followed by <strong>User Configuration settings</strong>, which are processed during user login. Computer startup scripts and user logon scripts can run during startup. In addition, user logoff scripts and computer shutdown scripts can run during shutdown.</p>

<p>The following steps describe the process of implementing the settings of the assigned <a href="https://en.wikipedia.org/wiki/Group_Policy">GPOs</a> for a computer and user:</p>

<ol>
  <li>When a computer is initializing during startup, it establishes a secure link between the computer and a domain controller. Then, the computer objects a list of <a href="https://en.wikipedia.org/wiki/Group_Policy">GPOs</a> to be applied.</li>
  <li>Computer configuration settings are applied synchronously during computer startup before the logon dialog box is presented to the user. Synchronous processing of policies means that each policy must be read and applied completely before the next policy can be invoked. The default synchronous behavior can be modified by the system administrator if necessary, although such modification is discouraged. No user interface is displayed during this process with the exception of a startup dialog box indication that policies are being applied. The policies are read and applied in the LSDOU sequence described earlier.</li>
  <li>Any startup scripts set to run during computer startup are processed. These scripts also run synchronously and have a default timeout of 600 seconds to complete. This process is hidden from the user.</li>
  <li>When the computer configuration scripts and startup scripts are complete, the user is prompted to press <em>Ctrl + Alt + Del</em> to log on.</li>
  <li>Upon successful authentication, the user profile is loaded, based on the Group Policy settings in effect.</li>
  <li>A list of <a href="https://en.wikipedia.org/wiki/Group_Policy">GPOs</a> specific for the user is obtained from the domain controller. User configuration settings also are processed in the LSDOU sequence. The GPO processing is again transparent to the user, and the policies are processed synchronously.</li>
  <li>After the user policies run, any logon scripts run. These scripts, unlike the startup scripts, run asynchronously by default. Asynchronously processing allows multiple scripts to be processed at the same time, without waiting for the outcome of a previously launched script to occur. However, the user object script runs last.</li>
  <li>The user’s desktop appears after all policies and scripts have been processed.</li>
</ol>

 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/htaccess-snippets</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/htaccess-snippets"/>
    <title>A collection of useful .htaccess snippets</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2015-09-06T00:00:00+00:00</published>
    <updated>2015-09-06T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <div class="alert alert-warning"><strong>Disclaimer:</strong> While dropping the snippet into an ".htaccess" file is most of the time sufficient, there are cases when certain modifications might be required. Use at your own risk.</div>

<div class="alert alert-info"><strong>Important:</strong> Apache 2.4 introduces a few breaking changes, most notably in access control configuration. For more information, check the <a href="https://httpd.apache.org/docs/2.4/upgrading.html">upgrading document</a> as well as <a href="https://github.com/phanan/htaccess/issues/2">this issue</a>.</div>

<h2 id="credits">Credits</h2>
<p>What we are doing here is mostly collecting useful snippets from all over the interwebs (for example, a good chunk is from <a href="https://github.com/h5bp/server-configs-apache">Apache Server Configs</a>) into one place. While we’ve been trying to credit where due, things might be missing. If you believe anything here is your work and credits should be given, let us know, or just send a PR.</p>

<h2 id="rewrite-and-redirection">Rewrite and Redirection</h2>
<p>Note: It is assumed that you have <code class="highlighter-rouge">mod_rewrite</code> installed and enabled.</p>

<h3 id="force-www">Force www</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine on
RewriteCond %{HTTP_HOST} ^example\.com [NC]
RewriteRule ^(.*)$ http://www.example.com/$1 [L,R=301,NC]
</code></pre></div></div>

<h3 id="force-www-in-a-generic-way">Force www in a Generic Way</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteCond %{HTTP_HOST} !^$
RewriteCond %{HTTP_HOST} !^www\. [NC]
RewriteCond %{HTTPS}s ^on(s)|
RewriteRule ^ http%1://www.%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</code></pre></div></div>

<p>This works for <em>any</em> domain. <a href="https://stackoverflow.com/questions/4916222/htaccess-how-to-force-www-in-a-generic-way">Source</a></p>

<h3 id="force-non-www">Force non-www</h3>
<p>It’s <a href="http://www.sitepoint.com/domain-www-or-no-www/">still</a> <a href="https://devcenter.heroku.com/articles/apex-domains">open</a> <a href="http://yes-www.org/">for</a> <a href="http://no-www.org/">debate</a> whether www or non-www is the way to go, so if you happen to be a fan of bare domains, here you go:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine on
RewriteCond %{HTTP_HOST} ^www\.example\.com [NC]
RewriteRule ^(.*)$ http://example.com/$1 [L,R=301]
</code></pre></div></div>

<h3 id="force-non-www-in-a-generic-way">Force non-www in a Generic Way</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine on
RewriteCond %{HTTP_HOST} ^www\.
RewriteCond %{HTTPS}s ^on(s)|off
RewriteCond http%1://%{HTTP_HOST} ^(https?://)(www\.)?(.+)$
RewriteRule ^ %1%3%{REQUEST_URI} [R=301,L]
</code></pre></div></div>

<h3 id="force-https">Force HTTPS</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine on
RewriteCond %{HTTPS} !on
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}

# Note: It's also recommended to enable HTTP Strict Transport Security (HSTS)
# on your HTTPS website to help prevent man-in-the-middle attacks.
# See https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security
&lt;IfModule mod_headers.c&gt;
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
&lt;/IfModule&gt;
</code></pre></div></div>

<h3 id="force-https-behind-a-proxy">Force HTTPS Behind a Proxy</h3>
<p>Useful if you have a proxy in front of your server performing TLS termination.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteCond %{HTTP:X-Forwarded-Proto} !https
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</code></pre></div></div>

<h3 id="force-trailing-slash">Force Trailing Slash</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteCond %{REQUEST_URI} /+[^\.]+$
RewriteRule ^(.+[^/])$ %{REQUEST_URI}/ [R=301,L]
</code></pre></div></div>

<h3 id="remove-trailing-slash">Remove Trailing Slash</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)/$ /$1 [R=301,L]
</code></pre></div></div>

<h3 id="redirect-a-single-page">Redirect a Single Page</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Redirect 301 /oldpage.html http://www.example.com/newpage.html
Redirect 301 /oldpage2.html http://www.example.com/folder/
</code></pre></div></div>

<p><a href="http://css-tricks.com/snippets/htaccess/301-redirects/">Source</a></p>

<h3 id="alias-a-single-directory">Alias a Single Directory</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine On
RewriteRule ^source-directory/(.*) target-directory/$1
</code></pre></div></div>

<h3 id="alias-paths-to-script">Alias Paths To Script</h3>
<p>This example has an <code class="highlighter-rouge">index.fcgi</code> file in some directory, and any requests within that directory that fail to resolve a filename/directory will be sent to the <code class="highlighter-rouge">index.fcgi</code> script. It’s good if you want <code class="highlighter-rouge">baz.foo/some/cool/path</code> to be handled by <code class="highlighter-rouge">baz.foo/index.fcgi</code> (which also supports requests to <code class="highlighter-rouge">baz.foo</code>) while maintaining <code class="highlighter-rouge">baz.foo/css/style.css</code> and the like.
Get access to the original path from the PATH_INFO environment variable, as exposed to your scripting environment.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine On
RewriteRule ^$ index.fcgi/ [QSA,L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.fcgi/$1 [QSA,L]
</code></pre></div></div>

<p>This is a less efficient version of the FallbackResource directive (because using <code class="highlighter-rouge">mod_rewrite</code> is more complex than just handling the <code class="highlighter-rouge">FallbackResource</code> directive), but it’s also more flexible.</p>

<h3 id="redirect-an-entire-site">Redirect an Entire Site</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Redirect 301 / http://newsite.com/
</code></pre></div></div>

<p>This way does it with links intact. That is <code class="highlighter-rouge">www.oldsite.com/some/crazy/link.html</code> will become <code class="highlighter-rouge">www.newsite.com/some/crazy/link.html</code>. This is extremely helpful when you are just “moving” a site to a new domain. <a href="http://css-tricks.com/snippets/htaccess/301-redirects/">Source</a></p>

<h3 id="alias-clean-urls">Alias “Clean” URLs</h3>
<p>This snippet lets you use “clean URLs” – those without a PHP extension, e.g. <code class="highlighter-rouge">example.com/users</code> instead of <code class="highlighter-rouge">example.com/users.php</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine On
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^([^.]+)$ $1.php [NC,L]
</code></pre></div></div>

<p><a href="http://www.abeautifulsite.net/access-pages-without-the-php-extension-using-htaccess/">Source</a></p>

<h2 id="security">Security</h2>

<h3 id="deny-all-access">Deny All Access</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Apache 2.2
Deny from all

## Apache 2.4
# Require all denied
</code></pre></div></div>

<p>But wait, this will lock you out from your content as well! Thus introducing…</p>

<h3 id="deny-all-access-except-yours">Deny All Access Except Yours</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Apache 2.2
Order deny,allow
Deny from all
Allow from xxx.xxx.xxx.xxx

## Apache 2.4
# Require all denied
# Require ip xxx.xxx.xxx.xxx
</code></pre></div></div>

<p><code class="highlighter-rouge">xxx.xxx.xxx.xxx</code> is your IP. If you replace the last three digits with 0/12 for example, this will specify a range of IPs within the same network, thus saving you the trouble to list all allowed IPs separately. <a href="http://speckyboy.com/2013/01/08/useful-htaccess-snippets-and-hacks/">Source</a></p>

<p>Now of course there’s a reversed version:</p>

<h3 id="allow-all-access-except-spammers">Allow All Access Except Spammers’</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Apache 2.2
Order deny,allow
Allow from all
Deny from xxx.xxx.xxx.xxx
Deny from xxx.xxx.xxx.xxy

## Apache 2.4
# Require all granted
# Require not ip xxx.xxx.xxx.xxx
# Require not ip xxx.xxx.xxx.xxy
</code></pre></div></div>

<h3 id="deny-access-to-hidden-files-and-directories">Deny Access to Hidden Files and Directories</h3>
<p>Hidden files and directories (those whose names start with a dot <code class="highlighter-rouge">.</code>) should most, if not all, of the time be secured. For example: <code class="highlighter-rouge">.htaccess</code>, <code class="highlighter-rouge">.htpasswd</code>, <code class="highlighter-rouge">.git</code>, <code class="highlighter-rouge">.hg</code>…</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteCond %{SCRIPT_FILENAME} -d [OR]
RewriteCond %{SCRIPT_FILENAME} -f
RewriteRule "(^|/)\." - [F]
</code></pre></div></div>

<p>Alternatively, you can just raise a <code class="highlighter-rouge">Not Found</code> error, giving the attacker dude no clue:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RedirectMatch 404 /\..*$
</code></pre></div></div>

<h3 id="deny-access-to-backup-and-source-files">Deny Access to Backup and Source Files</h3>
<p>These files may be left by some text/html editors (like Vi/Vim) and pose a great security danger, when anyone can access them.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;FilesMatch "(\.(bak|config|dist|fla|inc|ini|log|psd|sh|sql|swp)|~)$"&gt;
    ## Apache 2.2
    Order allow,deny
    Deny from all
    Satisfy All

    ## Apache 2.4
    # Require all denied
&lt;/FilesMatch&gt;
</code></pre></div></div>

<p><a href="https://github.com/h5bp/server-configs-apache">Source</a></p>

<h3 id="disable-directory-browsing">Disable Directory Browsing</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Options All -Indexes
</code></pre></div></div>

<h3 id="disable-image-hotlinking">Disable Image Hotlinking</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine on
# Remove the following line if you want to block blank referrer too
RewriteCond %{HTTP_REFERER} !^$

RewriteCond %{HTTP_REFERER} !^http(s)?://(.+\.)?yourdomain.com [NC]
RewriteRule \.(jpg|jpeg|png|gif|bmp)$ - [NC,F,L]

# If you want to display a "blocked" banner in place of the hotlinked image,
# replace the above rule with:
# RewriteRule \.(jpg|jpeg|png|gif|bmp) http://yourdomain.com/blocked.png [R,L]
</code></pre></div></div>

<h3 id="disable-image-hotlinking-for-specific-domains">Disable Image Hotlinking for Specific Domains</h3>
<p>Sometimes you want to disable image hotlinking from some bad guys only.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine on
RewriteCond %{HTTP_REFERER} ^http(s)?://(.+\.)?badsite\.com [NC,OR]
RewriteCond %{HTTP_REFERER} ^http(s)?://(.+\.)?badsite2\.com [NC,OR]
RewriteRule \.(jpg|jpeg|png|gif)$ - [NC,F,L]

# If you want to display a "blocked" banner in place of the hotlinked image,
# replace the above rule with:
# RewriteRule \.(jpg|jpeg|png|gif|bmp) http://yourdomain.com/blocked.png [R,L]
</code></pre></div></div>

<h3 id="password-protect-a-directory">Password Protect a Directory</h3>
<p>First you need to create a <code class="highlighter-rouge">.htpasswd</code> file somewhere in the system:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>htpasswd <span class="nt">-c</span> /home/fellowship/.htpasswd boromir
</code></pre></div></div>

<p>Then you can use it for authentication:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AuthType Basic
AuthName "One does not simply"
AuthUserFile /home/fellowship/.htpasswd
Require valid-user
</code></pre></div></div>

<h3 id="password-protect-a-file-or-several-files">Password Protect a File or Several Files</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AuthName "One still does not simply"
AuthType Basic
AuthUserFile /home/fellowship/.htpasswd

&lt;Files "one-ring.o"&gt;
Require valid-user
&lt;/Files&gt;

&lt;FilesMatch ^((one|two|three)-rings?\.o)$&gt;
Require valid-user
&lt;/FilesMatch&gt;
</code></pre></div></div>

<h3 id="block-visitors-by-referrer">Block Visitors by Referrer</h3>
<p>This denies access for all users who are coming from (referred by) a specific domain.
<a href="http://www.htaccess-guide.com/deny-visitors-by-referrer/">Source</a></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine on
# Options +FollowSymlinks
RewriteCond %{HTTP_REFERER} somedomain\.com [NC,OR]
RewriteCond %{HTTP_REFERER} anotherdomain\.com
RewriteRule .* - [F]
</code></pre></div></div>

<h3 id="prevent-framing-the-site">Prevent Framing the Site</h3>
<p>This prevents the website to be framed (i.e. put into an <code class="highlighter-rouge">iframe</code> tag), when still allows framing for a specific URI.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SetEnvIf Request_URI "/starry-night" allow_framing=true
Header set X-Frame-Options SAMEORIGIN env=!allow_framing
</code></pre></div></div>

<h2 id="performance">Performance</h2>

<h3 id="compress-text-files">Compress Text Files</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IfModule mod_deflate.c&gt;

    # Force compression for mangled headers.
    # http://developer.yahoo.com/blogs/ydn/posts/2010/12/pushing-beyond-gzipping
    &lt;IfModule mod_setenvif.c&gt;
        &lt;IfModule mod_headers.c&gt;
            SetEnvIfNoCase ^(Accept-EncodXng|X-cept-Encoding|X{15}|~{15}|-{15})$ ^((gzip|deflate)\s*,?\s*)+|[X~-]{4,13}$ HAVE_Accept-Encoding
            RequestHeader append Accept-Encoding "gzip,deflate" env=HAVE_Accept-Encoding
        &lt;/IfModule&gt;
    &lt;/IfModule&gt;

    # Compress all output labeled with one of the following MIME-types
    # (for Apache versions below 2.3.7, you don't need to enable `mod_filter`
    #  and can remove the `&lt;IfModule mod_filter.c&gt;` and `&lt;/IfModule&gt;` lines
    #  as `AddOutputFilterByType` is still in the core directives).
    &lt;IfModule mod_filter.c&gt;
        AddOutputFilterByType DEFLATE application/atom+xml \
                                      application/javascript \
                                      application/json \
                                      application/rss+xml \
                                      application/vnd.ms-fontobject \
                                      application/x-font-ttf \
                                      application/x-web-app-manifest+json \
                                      application/xhtml+xml \
                                      application/xml \
                                      font/opentype \
                                      image/svg+xml \
                                      image/x-icon \
                                      text/css \
                                      text/html \
                                      text/plain \
                                      text/x-component \
                                      text/xml
    &lt;/IfModule&gt;

&lt;/IfModule&gt;
</code></pre></div></div>

<p><a href="https://github.com/h5bp/server-configs-apache">Source</a></p>

<h3 id="set-expires-headers">Set Expires Headers</h3>
<p><em>Expires headers</em> tell the browser whether they should request a specific file from the server or just grab it from the cache. It is advisable to set static content’s expires headers to something far in the future.
If you don’t control versioning with filename-based cache busting, consider lowering the cache time for resources like CSS and JS to something like 1 week. <a href="https://github.com/h5bp/server-configs-apache">Source</a></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IfModule mod_expires.c&gt;
    ExpiresActive on
    ExpiresDefault                                      "access plus 1 month"

  # CSS
    ExpiresByType text/css                              "access plus 1 year"

  # Data interchange
    ExpiresByType application/json                      "access plus 0 seconds"
    ExpiresByType application/xml                       "access plus 0 seconds"
    ExpiresByType text/xml                              "access plus 0 seconds"

  # Favicon (cannot be renamed!)
    ExpiresByType image/x-icon                          "access plus 1 week"

  # HTML components (HTCs)
    ExpiresByType text/x-component                      "access plus 1 month"

  # HTML
    ExpiresByType text/html                             "access plus 0 seconds"

  # JavaScript
    ExpiresByType application/javascript                "access plus 1 year"

  # Manifest files
    ExpiresByType application/x-web-app-manifest+json   "access plus 0 seconds"
    ExpiresByType text/cache-manifest                   "access plus 0 seconds"

  # Media
    ExpiresByType audio/ogg                             "access plus 1 month"
    ExpiresByType image/gif                             "access plus 1 month"
    ExpiresByType image/jpeg                            "access plus 1 month"
    ExpiresByType image/png                             "access plus 1 month"
    ExpiresByType video/mp4                             "access plus 1 month"
    ExpiresByType video/ogg                             "access plus 1 month"
    ExpiresByType video/webm                            "access plus 1 month"

  # Web feeds
    ExpiresByType application/atom+xml                  "access plus 1 hour"
    ExpiresByType application/rss+xml                   "access plus 1 hour"

  # Web fonts
    ExpiresByType application/font-woff2                "access plus 1 month"
    ExpiresByType application/font-woff                 "access plus 1 month"
    ExpiresByType application/vnd.ms-fontobject         "access plus 1 month"
    ExpiresByType application/x-font-ttf                "access plus 1 month"
    ExpiresByType font/opentype                         "access plus 1 month"
    ExpiresByType image/svg+xml                         "access plus 1 month"
&lt;/IfModule&gt;
</code></pre></div></div>

<h3 id="turn-etags-off">Turn eTags Off</h3>
<p>By removing the <code class="highlighter-rouge">ETag</code> header, you disable caches and browsers from being able to validate files, so they are forced to rely on your <code class="highlighter-rouge">Cache-Control</code> and <code class="highlighter-rouge">Expires</code> header. <a href="http://www.askapache.com/htaccess/apache-speed-etags.html">Source</a></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IfModule mod_headers.c&gt;
    Header unset ETag
&lt;/IfModule&gt;
FileETag None
</code></pre></div></div>

<h2 id="miscellaneous">Miscellaneous</h2>

<h3 id="set-php-variables">Set PHP Variables</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php_value &lt;key&gt; &lt;val&gt;

# For example:
php_value upload_max_filesize 50M
php_value max_execution_time 240
</code></pre></div></div>

<h3 id="custom-error-pages">Custom Error Pages</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ErrorDocument 500 "Houston, we have a problem."
ErrorDocument 401 http://error.yourdomain.com/mordor.html
ErrorDocument 404 /errors/halflife3.html
</code></pre></div></div>

<h3 id="force-downloading">Force Downloading</h3>
<p>Sometimes you want to force the browser to download some content instead of displaying it.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Files *.md&gt;
    ForceType application/octet-stream
    Header set Content-Disposition attachment
&lt;/Files&gt;
</code></pre></div></div>

<p>Now there is a yang to this yin:</p>

<h3 id="prevent-downloading">Prevent Downloading</h3>
<p>Sometimes you want to force the browser to display some content instead of downloading it.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;FilesMatch "\.(tex|log|aux)$"&gt;
    Header set Content-Type text/plain
&lt;/FilesMatch&gt;
</code></pre></div></div>

<h3 id="allow-cross-domain-fonts">Allow Cross-Domain Fonts</h3>
<p>CDN-served webfonts might not work in Firefox or IE due to <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>. This snippet solves the problem.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IfModule mod_headers.c&gt;
    &lt;FilesMatch "\.(eot|otf|ttc|ttf|woff|woff2)$"&gt;
        Header set Access-Control-Allow-Origin "*"
    &lt;/FilesMatch&gt;
&lt;/IfModule&gt;
</code></pre></div></div>

<p><a href="https://github.com/h5bp/server-configs-apache/issues/32">Source</a></p>

<h3 id="auto-utf-8-encode">Auto UTF-8 Encode</h3>
<p>Your text content should always be UTF-8 encoded, no?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Use UTF-8 encoding for anything served text/plain or text/html
AddDefaultCharset utf-8

# Force UTF-8 for a number of file formats
AddCharset utf-8 .atom .css .js .json .rss .vtt .xml
</code></pre></div></div>

<p><a href="https://github.com/h5bp/server-configs-apache">Source</a></p>

<h3 id="switch-to-another-php-version">Switch to Another PHP Version</h3>
<p>If you’re on a shared host, chances are there are more than one version of PHP installed, and sometimes you want a specific version for your website. For example, <a href="https://github.com/laravel/laravel">Laravel</a> requires PHP &gt;= 5.4. The following snippet should switch the PHP version for you.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AddHandler application/x-httpd-php55 .php

# Alternatively, you can use AddType
AddType application/x-httpd-php55 .php
</code></pre></div></div>

<h3 id="disable-internet-explorer-compatibility-view">Disable Internet Explorer Compatibility View</h3>
<p>Compatibility View in IE may affect how some websites are displayed. The following snippet should force IE to use the Edge Rendering Engine and disable the Compatibility View.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IfModule mod_headers.c&gt;
    BrowserMatch MSIE is-msie
    Header set X-UA-Compatible IE=edge env=is-msie
&lt;/IfModule&gt;
</code></pre></div></div>

<h3 id="serve-webp-images">Serve WebP Images</h3>
<p>If <a href="https://developers.google.com/speed/webp/?csw=1">WebP images</a> are supported and an image with a .webp extension and the same name is found at the same place as the jpg/png image that is going to be served, then the WebP image is served instead.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RewriteEngine On
RewriteCond %{HTTP_ACCEPT} image/webp
RewriteCond %{DOCUMENT_ROOT}/$1.webp -f
RewriteRule (.+)\.(jpe?g|png)$ $1.webp [T=image/webp,E=accept:1]
</code></pre></div></div>

<p><a href="https://github.com/vincentorback/WebP-images-with-htaccess">Source</a></p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/www-non-www-redirection</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/www-non-www-redirection"/>
    <title>Nginx config for www and non-www redirection</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2015-01-16T00:00:00+00:00</published>
    <updated>2015-01-16T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>There are many ways to force Nginx to use either WWW version or non-WWW version of URLs for your site.</p>

<h2 id="redirect-non-www-to-www">Redirect non-www to WWW</h2>

<h3 id="single-domain">Single domain</h3>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
  <span class="kn">server_name</span> <span class="s">example.com</span><span class="p">;</span>
  <span class="kn">return</span> <span class="mi">301</span> <span class="nv">$scheme</span><span class="p">:</span><span class="n">//www.example.com</span><span class="nv">$request_uri</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="all-domains">All domains</h3>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
  <span class="kn">server_name</span> <span class="s">"~^(?!www</span><span class="err">\</span><span class="s">.).*"</span> <span class="p">;</span>
  <span class="kn">return</span> <span class="mi">301</span> <span class="nv">$scheme</span><span class="p">:</span><span class="n">//www.</span><span class="nv">$host$request_uri</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="from-www-to-non-www">From WWW to non-WWW</h2>

<h3 id="single-domain-1">Single domain</h3>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
  <span class="kn">server_name</span> <span class="s">www.example.com</span><span class="p">;</span>
  <span class="kn">return</span> <span class="mi">301</span> <span class="nv">$scheme</span><span class="p">:</span><span class="n">//example.com</span><span class="nv">$request_uri</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="all-domains-1">All domains</h3>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
  <span class="kn">server_name</span> <span class="s">"~^www</span><span class="err">\</span><span class="s">.(.*)</span>$<span class="s">"</span> <span class="p">;</span>
  <span class="kn">return</span> <span class="mi">301</span> <span class="nv">$scheme</span><span class="p">:</span><span class="n">//</span><span class="nv">$1$request_uri</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In both cases, for other-www, we create a altogether different server { } block. IMHO, this is cleanest and optimised way to handle www to non-www and non-www to www redirection.</p>

<p>There are some WordPress plugins available there which can handle this at PHP-level. But for performance reason, always handle things in Nginx, that can be handled in Nginx alone!</p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/give-user-permission-to-edit-and-add-files-in-var-www</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/give-user-permission-to-edit-and-add-files-in-var-www"/>
    <title>Give user permission to edit and add files in /var/www</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2015-01-10T00:00:00+00:00</published>
    <updated>2015-01-10T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>Tutorial showing you how to give an Ubuntu user the right to edit and add files in the <code class="highlighter-rouge">/var/www</code> folders.</p>

<p>Add the www-data group to an existing user</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>usermod <span class="nt">-a</span> <span class="nt">-G</span> www-data username
</code></pre></div></div>

<p>OR if the user doesn’t exist: Create a new user and assign them the <code class="highlighter-rouge">www-data</code> group</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>adduser username www-data
</code></pre></div></div>

<p>Make sure all files are owned by the www-data group and user (cleans up the ownership)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nt">-R</span> www-data:www-data /var/www
</code></pre></div></div>

<p>Enable all members of the www-data group to read and write files</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod</span> <span class="nt">-R</span> g+rw /var/www
</code></pre></div></div>

<p><strong>Note:</strong> You are done. But if you want all future files created in this directory to keep the current setup do the following as well:</p>

<p>This is what I do to ensure that all files created keep the current user and permissions (it’s really lame to create new files, say from Git, and then have to update the user, groups and permissions of the new files every time to ensure they can be run by the server)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod</span> <span class="nt">-R</span> g+rws /var/www
</code></pre></div></div>

<p><strong>Final Note:</strong> For security reasons it may be better to keep /var/www owned by root:root (depending on what you are doing)</p>

<p>If you want to keep <code class="highlighter-rouge">/var/www</code> owned by root replace step 2 with</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chgrp</span> <span class="nt">-R</span> www-data /var/www/<span class="k">*</span>
</code></pre></div></div>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/use-gitolite-to-control-access-to-a-git-server</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/use-gitolite-to-control-access-to-a-git-server"/>
    <title>Use Gitolite to Control Access to a Git Server</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2015-01-09T00:00:00+00:00</published>
    <updated>2015-01-09T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>Git is a great distributed version control system that can be used to keep track of changes and code for any kind of project. Sometimes, it is helpful to configure a git server to house your team’s projects.</p>

<p><strong>Gitolite</strong> provides an access-control layer for a git server, so that you can configure user-based git access without the accompanying operating system user accounts. This provides your git contributors the privileges they need, without exposing your server to other kinds of interaction.</p>

<p>We will be installing these components on an Debian 7.0 VPS. This tutorial assumes that you have a regular user account on this VPS with sudo privileges.</p>

<h2 id="install-git">Install Git</h2>

<p>Log into your Debian server with your regular user account.</p>

<p>We will be installing git from Debian’s default repositories:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>git-core
</code></pre></div></div>

<p>We now have git installed. We will want to configure a few things for git to operate properly.</p>

<h2 id="install-gitolite">Install Gitolite</h2>

<p>Now that we have git set up correctly, we can install gitolite to manage user access to our repositories.</p>

<p>Gitolite is also available in Debian’s default repositories. Install it with this command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gitolite
</code></pre></div></div>

<p>Gitolite manages its configuration through git! To set this up properly, we’ll create a operating system user whose sole function is to interact with gitolite.</p>

<p>The operating system user will be called <code class="highlighter-rouge">git</code> to make it easy for our collaborators to remember. We will not set a password so that it is only accessible through using the <code class="highlighter-rouge">su</code> command.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>adduser <span class="nt">--system</span> <span class="nt">--group</span> <span class="nt">--shell</span> /bin/bash <span class="nt">--disabled-password</span> git
</code></pre></div></div>

<p>We now have a user called “git” that will handle gitolite configuration. We need to be able to access this user from a normal account. We will do this by configuring an SSH key associated with git administration.</p>

<h2 id="configure-ssh-keys-for-git-administration">Configure SSH Keys for Git Administration</h2>

<p>On your <strong>local computer</strong>, which you will be using to administer git and gitolite, you need to create an SSH key pair if you have not done so already.</p>

<p><strong><em>Note:</em></strong> <em>If you already have a key pair created, you should skip this command to avoid overwriting your SSH keys.</em></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa
</code></pre></div></div>

<p>Accept the default location and press <code class="highlighter-rouge">ENTER</code> to configure key-based login without a password.</p>

<p>Copy the public key to the git server by typing:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp ~/.ssh/id_rsa.pub regular_username@git_server_IP_address:/tmp/git-admin.pub
</code></pre></div></div>

<p>If you followed the Initial Server Setup article, you will need to allow SSH access to the git user. You can do that by editing <code class="highlighter-rouge">/etc/ssh/sshd_config</code> and adding git to the <code class="highlighter-rouge">AllowUsers</code> directive. Once you’re done, restart the SSH server:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service ssh restart
</code></pre></div></div>

<h2 id="configure-gitolite">Configure Gitolite</h2>

<p>The next steps will take place back on our git server. Log back in with your normal user.</p>

<p>We can log in with our “git” user to initialize gitolite with the public key we just transferred.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>su - git
</code></pre></div></div>

<p>Now, we can set up gitolite with the following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gl-setup /tmp/git-admin.pub
</code></pre></div></div>

<p>Hit <code class="highlighter-rouge">ENTER</code> to pull the configuration into your editor. Scan the contents to make sure the default configuration will meet your needs. You can always change it later.</p>

<p>When you are finished, save and exit out of the file.</p>

<h2 id="how-to-administer-gitolite">How To Administer Gitolite</h2>

<p>Back on your <strong>local</strong> computer, you can begin administering gitolite.</p>

<p>If you do not already have git installed on this computer, you need to install it with:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>git-core
</code></pre></div></div>

<p>First, we need to clone the gitolite information from our git server to our local machine:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@git_server_IP_address:gitolite-admin
</code></pre></div></div>

<p>This will create a new directory called <code class="highlighter-rouge">gitolite-admin</code> within your current directory. Here, we can make changes to our access policies and then push those changes to the git server.</p>

<h2 id="add-new-users-to-gitolite">Add New Users to Gitolite</h2>

<p>To add users to your projects, you will need their public keys. Gitolite works by associating the username that will be signing in with the public key with the same name. We will pretend we have a user called <code class="highlighter-rouge">john</code> for this demonstration.</p>

<p>On the local machine, we can change into the <code class="highlighter-rouge">gitolite-admin</code> directory and see what is inside:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>gitolite-admin
<span class="nb">ls</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conf    keydir
</code></pre></div></div>

<p>Inside, there are two directories: <code class="highlighter-rouge">conf</code> and <code class="highlighter-rouge">keydir</code>. Unsurprisingly, <code class="highlighter-rouge">keydir</code> contains user keys.</p>

<p>You would communicate with “john” and acquire the public key that he plans on using. You would then copy that key into this directory like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /path/to/johns/public/key.pub ~/gitolite-admin/keydir/john.pub
</code></pre></div></div>

<p>After that, you need to add the new public key to the git repository.</p>

<p>First, we want to configure the user name and email that will be associated with administrative git actions. Type these commands to configure this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"your_name_here"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"your_email@address.com"</span>
</code></pre></div></div>

<p>You probably also want to configure git to use the editor of your choice. Type this command to specify your preferences:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> core.editor your_editor_choice
</code></pre></div></div>

<p>Now, we can add the new file to git:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add keydir/john.pub
</code></pre></div></div>

<p>Commit the changes with a message:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-a</span> <span class="nt">-m</span> <span class="s2">"New user John added"</span>
</code></pre></div></div>

<p>Push the changes up to the git server to save the results:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push
</code></pre></div></div>

<h2 id="configure-access-with-gitolite">Configure Access with Gitolite</h2>

<p>When you added the user in the last section, you may have noticed a warning like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remote:
remote:         <span class="k">*****</span> WARNING <span class="k">*****</span>
remote:         the following <span class="nb">users</span> <span class="o">(</span>pubkey files <span class="k">in </span>parens<span class="o">)</span> <span class="k">do </span>not appear <span class="k">in </span>the config file:
remote: john<span class="o">(</span>john.pub<span class="o">)</span>
</code></pre></div></div>

<p>You will receive a message that the new user is not in the config file. This means that the user “john” is known to gitolite, but no access has been created for him.</p>

<p>We can easily add him to our configuration by editing the <code class="highlighter-rouge">~/gitolite-admin/conf/gitolite.conf</code> file.</p>

<p>We will go one step further though and give him his own repository. We will create a repository called <code class="highlighter-rouge">johns-project</code> and give him access:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/gitolite-admin/conf/gitolite.conf
repo    gitolite-admin
RW+     <span class="o">=</span>   git-admin

repo    testing
RW+     <span class="o">=</span>   @all
</code></pre></div></div>

<p>As you can see, the syntax is pretty simple.</p>

<p>We specify a git repository with the <code class="highlighter-rouge">repo</code> keyword followed by its name. Under that, we write the privilege type, an equal sign (=), and the users who should get that access.</p>

<p>Groups can be defined with a line like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@group_name <span class="o">=</span> user1 user2 user3
</code></pre></div></div>

<p>After that, we can refer to a number of users like by referencing the group:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>repo    some_repo
RW+     <span class="o">=</span> @group_name
</code></pre></div></div>

<p>A special group called <code class="highlighter-rouge">@all</code> references all users or all repositories, based on the context.</p>

<p>The permissions can be one of these values:</p>

<p>R: Read only access
RW: Can read or push new changes. Cannot delete refs that exist on the git server already.
RW+: Can push destructively, or delete refs on the server.
-: Has no access to the specified content.</p>

<p>We can give “john” full access to a new repository called <code class="highlighter-rouge">johns-project</code> by adding these lines to the end of the file:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>repo    johns-project
RW+     <span class="o">=</span>       john
</code></pre></div></div>

<p>Save and close the file.</p>

<p>Now, we can commit this change with a new message:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-a</span> <span class="nt">-m</span> <span class="s2">"Made John's repo"</span>
</code></pre></div></div>

<p>Finally, push the changes to the git server:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push
</code></pre></div></div>

<p>Now, “john” should be able to clone his project repository with the following command, from the computer where he created the public and private keys:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@git_server_IP_address:johns-project
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>You should now have gitolite configured correctly. You should be able to create git users easily without worrying about configuring accompanying operating system users and permissions every time.</p>

<p>If you are managing multiple projects with diverse teams, it is probably best to set up groups that correspond to projects. It might also be helpful to organize your <code class="highlighter-rouge">keydir</code> keys into subdirectories based on project. Gitolite will use them the same way, but they will be easier to find for administrative purposes.</p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/open-hackerspaces-day-2014</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/open-hackerspaces-day-2014"/>
    <title>March 29th marks this years International open Hackerspaces day</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2014-03-15T00:00:00+00:00</published>
    <updated>2014-03-15T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>Just like the past three years, the hackerspace community will open their doors to the public, on Saturday the 29th of March 2014.</p>

<p>Designing 3D printed cookie cutters, making your own soap, milling furniture, from adjusting the colours of your living room lights to match the film you’re watching to checking how secure Whatsapp really is. It’s all possible in a hackerspace.</p>

<p>A hackerspace is an environment where creative, legal, technical and other curious people join together to work, think about and talk over a wide variety of subjects. “Some of these projects are really practical, others are more “because we can”. What is always the same is our goal to gather knowledge, work together and share our knowledge” says Jildou, founder of the Frack hackerspace.</p>

<p>The members of many hackerspaces demonstrate this goal by inviting anyone curious  to come by and see what’s possible. Hacking isn’t just what the media tells you it is.</p>

<p>“The hackerspaces like to supplement each other and work together where possible. This way we can learn from each others faults, increase our knowledge and will we be able to offer a wide variety of projects all around the country”, explains Dave Borghuis, the founder of Tkkrlab.</p>

<p>Next to building machines, members also work on projects to, for example, remotely open the front door of their space, or to adjust the temperature of multiple areas via the internet. There’s also a collaboration with a library to teach kids how to solder, there are privacy workshops on multiple locations and spaces work together with municipalities regarding security and open data.</p>

<p>The open day will be a colourful whole, with activities spread all through the country. Every hackerspace will have their own interpretation. An overview of activities and opening times can be found at <a href="http://hackerspaces.nl/">http://hackerspaces.nl/</a> or on the website of the local space.</p>

<p>Everybody is welcome to come over!</p>

<p>12 Dutch hackerspaces are joining, for more information about the activities take a look at their own website.</p>

<ul>
  <li>Almere: <a href="http://sk1llz.nl/">Sk1llz</a></li>
  <li>Amersfoort: <a href="http://bitlair.nl/">Bitlair</a></li>
  <li>Amsterdam: <a href="http://techinc.nl/">Technologia Incognita</a></li>
  <li>Amsterdam: <a href="http://laglab.org/">LAG</a></li>
  <li>Arnhem: <a href="http://hack42.nl/">Hack42</a></li>
  <li>Den Haag: <a href="http://revspace.nl/">Revelation Space</a></li>
  <li>Eindhoven : <a href="http://madspace.nl/">MADspace</a></li>
  <li>Enschede: <a href="http://tkkrlab.nl/">TkkrLab</a></li>
  <li>Heerlen: <a href="https://ackspace.nl/">ACKspace</a></li>
  <li>Leeuwarden: <a href="http://frack.nl/">Frack</a></li>
  <li>Utrecht: <a href="http://www.randomdata.nl/">RandomData</a></li>
  <li>Wageningen: <a href="http://nurdspace.nl/">NURDspace</a></li>
</ul>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/how-to-use-gpg-to-encrypt-and-sign-messages</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/how-to-use-gpg-to-encrypt-and-sign-messages"/>
    <title>How To Use GPG to Encrypt and Sign Messages</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2014-02-15T00:00:00+00:00</published>
    <updated>2014-02-15T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>GPG, or GNU Privacy Guard, is a public key cryptography implementation. This allows for the secure transmission of information between parties and can be used to verify that the origin of a message is genuine.</p>

<p>In this guide, we will discuss how GPG works and how to implement it. We will be using an Ubuntu 12.04 VPS for this demonstration, but the tools are available on any modern Linux distribution.</p>

<h2 id="how-public-key-encryption-works">How Public Key Encryption Works</h2>
<p>A problem that many users face is how to communicate securely and validate the identity of the party they are talking to. Many schemes that attempt to answer this question require, at least at some point, the transfer of a password or other identifying credentials, over an insecure medium.</p>

<h3 id="ensure-that-only-the-intended-party-can-read">Ensure That Only the Intended Party Can Read</h3>
<p>To get around this issue, GPG relies on a security concept known as public key encryption. The idea is that you can split the encrypting and decrypting stages of the transmission into two separate pieces. That way, you can freely distribute the encrypting portion, as long as you secure the decrypting portion.</p>

<p>This would allow for a one-way message transfer that can be created and encrypted by anyone, but only be decrypted by the designated user (the one with the private decrypting key). If both of the parties create public/private key pairs and give each other their public encrypting keys, they can both encrypt messages to each other.</p>

<p>So in this scenario, each party has their own private key and the other user’s public key.</p>

<h3 id="validate-the-identity-of-the-sender">Validate the Identity of the Sender</h3>
<p>Another benefit of this system is that the sender of a message can “sign” the message with their private key. The public key that the receiver has can be used to verify that the signature is actually being sent by the indicated user.</p>

<p>This can prevent a third-party from “spoofing” the identity of someone. It also helps to ensure that the message was transmitted in-full, without damage or file corruption.</p>

<h2 id="set-up-gpg-keys">Set Up GPG Keys</h2>
<p>GPG should be installed by default on Ubuntu 12.04. If it is not, you can install it with:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gnupg
</code></pre></div></div>

<p>To begin using GPG to encrypt your communications, you need to create a key pair. You can do this by issuing the following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--gen-key</span>
</code></pre></div></div>

<p>This will take you through a few questions that will configure your keys.</p>

<ul>
  <li>Please select what kind of key you want: <em>(1) RSA and RSA (default)</em></li>
  <li>What keysize do you want? <em>4096</em></li>
  <li>Key is valid for? <em>0</em></li>
  <li>Is this correct? <em>y</em></li>
  <li>Real name: <em>your real name here</em></li>
  <li>Email address: <em>your_email@address.com</em></li>
  <li>Comment: <em>Optional comment that will be visible in your signature</em></li>
  <li>Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <em>O</em></li>
  <li>Enter passphrase: <em>Enter a secure passphrase here</em></li>
</ul>

<p>At this point, it will need to generate the keys using entropy. This is basically a term to describe the amount of unpredictability that exists in a system. GPG uses this entropy to generate a random set of keys.</p>

<p>It is best to open a new terminal and ssh into the VPS while this runs. Install some software, do some work, and just use the machine as much as possible to let it generate the needed entropy.</p>

<p>This process may take a long time, depending on how active you can make your system.</p>

<h3 id="create-a-revocation-certificate">Create a Revocation Certificate</h3>
<p>You need to have a way of invalidating your key pair in case there is a security breach, or in case you lose your secret key. There is an easy way of doing this with the GPG software.</p>

<p>This should be done as soon as you make the key pair, not when you need it. This revocation key must be generated ahead of time and kept in a secure, separate location in case your computer is compromised or inoperable. Type:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--gen-revoke</span> your_email@address.com
</code></pre></div></div>

<p>You will be asked for the reason that it is being revoked. You can choose any of the available options, but since this is being done ahead of time, you won’t have the specifics.</p>

<p>You will then be offered to supply a comment and finally, to confirm the selections.</p>

<p>Afterwards, a revocation certificate will be generated to the screen. Copy and paste this to a secure location, or print it for later use:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Revocation certificate created.

Please move it to a medium which you can hide away<span class="p">;</span> <span class="k">if </span>Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just <span class="k">in case</span>
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
<span class="nt">-----BEGIN</span> PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.11 <span class="o">(</span>GNU/Linux<span class="p">)</span>
Comment: A revocation certificate should follow

iQIfBCABAgAJBQJSTxNSAh0AAAoJEIKHahUxGx+E15EP/1BL2pCTqSG9IYbz4CMN
bCW9HgeNpb24BK9u6fAuyH8aieLVD7It80LnSg/+PgG9t4KlzUky5sOoo54Qc3rD
H+JClu4oaRpq25vWd7+Vb2oOwwd/27Y1KRt6TODwK61z20XkGPU2NJ/ATPn9yIR9
4B10QxqqQSpQeB7rr2+Ahsyl5jefswwXmduDziZlZqf+g4lv8lZlJ8C3+GKv06fB
FJwE6XO4Y69LNAeL+tzSE9y5lARKVMfqor/wS7lNBdFzo3BE0w68HN6iD+nDbo8r
xCdQ9E2ui9os/5yf9Y3Uzky1GTLmBhTqPnl8AOyHHLTqqOT47arpwRXXDeNd4B7C
DiE0p1yevG6uZGfhVAkisNfi4VrprTx73NGwyahCc3gO/5e2GnKokCde/NhOknci
Wl4oSL/7a3Wx8h/XKeNvkiurInuZugFnZVKbW5kvIbHDWJOanEQnLJp3Q2tvebrr
BBHyiVeQiEwOpFRvBuZW3znifoGrIc7KMmuEUPvA243xFcRTO3G1D1X9B3TTSlc/
o8jOlv6y2pcdBfp4aUkFtunE4GfXmIfCF5Vn3TkCyBV/Y2aW/fpA3Y+nUy5hPhSt
tprTYmxyjzSvaIw5tjsgylMZ48+qp/Awe34UWL9AWk3DvmydAerAxLdiK/80KJp0
88qdrRRgEuw3qfBJbNZ7oM/o
<span class="o">=</span>isbs
<span class="nt">-----END</span> PGP PUBLIC KEY BLOCK-----
</code></pre></div></div>

<h2 id="how-to-import-other-users-public-keys">How To Import Other Users’ Public Keys</h2>
<p>GPG would be pretty useless if you could not accept other public keys from people you wished to communicate with.</p>

<p>You can import someone’s public key in a variety of ways. If you’ve obtained a public key from someone in a text file, GPG can import it with the following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--import</span> name_of_pub_key_file
</code></pre></div></div>

<p>There is also the possibility that the person you are wishing to communicate with has uploaded their key to a public key server. These key servers are used to house people’s public keys from all over the world.</p>

<p>A popular key server that syncs its information with a variety of other servers is the MIT public key server. You can search for people by their name or email address by going here in your web browser:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://pgp.mit.edu/
</code></pre></div></div>

<p>You can also search the key server from within GPG by typing the following:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--keyserver</span> pgp.mit.edu  <span class="nt">--search-keys</span> search_parameters
</code></pre></div></div>

<h2 id="how-to-verify-and-sign-keys">How To Verify and Sign Keys</h2>
<p>While you can freely distribute your generated public key file and people can use this to contact you in an encrypted way, there is still an issue of trust in the initial public key transmission.</p>

<h3 id="verify-the-other-persons-identity">Verify the Other Person’s Identity</h3>
<p>How do you know that the person giving you the public key is who they say they are? In some cases, this may be simple. You may be sitting right next to the person with your laptops both open and exchanging keys. This should be a pretty secure way of identifying that you are receiving the correct, legitimate key.</p>

<p>But there are many other circumstances where such personal contact is not possible. You may not know the other party personally, or you may be separated by physical distance. If you never want to communicate over insecure channels, verification of the public key could be problematic.</p>

<p>Luckily, instead of verifying the entire public keys of both parties, you can simply compare the “fingerprint” derived from these keys. This will give you a reasonable assurance that you both are using the same public key information.</p>

<p>You can get the fingerprint of a public key by typing:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--fingerprint</span> your_email@address.com
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pub   4096R/311B1F84 2013-10-04
      Key fingerprint <span class="o">=</span> CB9E C70F 2421 AF06 7D72  F980 8287 6A15 311B 1F84
uid                  Test User &lt;test.user@address.com&gt;
sub   4096R/8822A56A 2013-10-04
</code></pre></div></div>

<p>This will produce a much more manageable string of numbers to compare. You can compare this string with the person themselves, or someone else who has access to that person.</p>

<h3 id="sign-their-key">Sign Their Key</h3>
<p>Signing a key tells your software that you trust the key that you have been provided with and that you have verified that it is associated with the person in question.</p>

<p>To sign a key that you’ve imported, simply type:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--sign-key</span> email@example.com
</code></pre></div></div>

<p>After you’ve signed the key, it means you verify that you trust the person is who he/she claims to be. This can help other people decide whether to trust that person too. If someone trusts you, and they see that you’ve signed this person’s key, they may be more likely to trust their identity too.</p>

<p>You should allow the person whose key you are signing the advantages of your trusted relationship by sending them back the signed key. You can do this by typing:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--export</span> <span class="nt">--armor</span> email@example.com
</code></pre></div></div>

<p>You’ll have to type in your passphrase again. Afterwards, their public key, signed by you, will be spit out on the screen. Send them this, so that they can benefit from gaining your “stamp of approval” when interacting with others.</p>

<p>When they receive this new, signed key, they can import it, adding on the signing information you’ve generated, into their GPG database. They can do this by typing:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--import</span> file_name
</code></pre></div></div>

<h2 id="how-to-make-your-public-key-highly-available">How To Make Your Public Key Highly Available</h2>
<p>There is not really anything malicious that can happen if unknown people have your public key.</p>

<p>Because of this, it may be beneficial to make your public key easily available. People can then easily find your information to send you secure messages, from the very first communication.</p>

<p>You can send anyone your public key by requesting it from the GPG system:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--armor</span> <span class="nt">--export</span> your_email@address.com
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-----BEGIN</span> PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.11 <span class="o">(</span>GNU/Linux<span class="o">)</span>

mQINBFJPCuABEACiog/sInjg0O2SqgmG1T8n9FroSTdN74uGsRMHHAOuAmGLsTse
9oxeLQpN+r75Ko39RVE88dRcW710fPY0+fjSXBKhpN+raRMUKJp4AX9BJd00YA/4
EpD+8cDK4DuLlLdn1x0q41VUsznXrnMpQedRmAL9f9bL6pbLTJhaKeorTokTvdn6
5VT3pb2o+jr6NETaUxd99ZG/osPar9tNThVLIIzG1nDabcTFbMB+w7wOJuhXyTLQ
JBU9xmavTM71PfV6Pkh4j1pfWImXc1D8dS+jcvKeXInBfm2XZsfOCesk12YnK3Nc
u1Xe1lxzSt7Cegum4S/YuxmYoh462oGZ7FA4Cr2lvAPVpO9zmgQ8JITXiqYg2wB3
<span class="nb">.</span> <span class="nb">.</span> <span class="nb">.</span>
</code></pre></div></div>

<p>You can then copy and paste this or send this in an appropriate medium.</p>

<p>If you want to publish your key to a key server, you can do it manually through the forms available on most of the server sites.</p>

<p>Another option is to do this through the GPG interface.</p>

<p>Look up your key ID by typing:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--list-keys</span> your_email@address.com
</code></pre></div></div>

<p>The highlighted portion is your key ID. It is a short way to reference the key to the internal software.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pub   4096R/311B1F84 2013-10-04
uid                  Test User &lt;test.user@address.com&gt;
sub   4096R/8822A56A 2013-10-04
</code></pre></div></div>

<p>To upload your key to a certain key server, you can then use this syntax:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--send-keys</span> <span class="nt">--keyserver</span> pgp.mit.edu key_id
</code></pre></div></div>

<h3 id="encrypt-and-decrypt-messages-with-gpg">Encrypt and Decrypt Messages with GPG</h3>
<p>You can easily encrypt and decrypt messages after you have configured your keys with the other party.</p>

<h3 id="encrypt-messages">Encrypt Messages</h3>
<p>You can encrypt messages using the “–encrypt” flag for GPG. The basic syntax would be:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--encrypt</span> <span class="nt">--sign</span> <span class="nt">--armor</span> <span class="nt">-r</span> person@email.com name_of_file
</code></pre></div></div>

<p>The parameters basically encrypt the email, sign it with your private key to guarantee that it is coming from you, and generates the message in a text format instead of raw bytes.</p>

<p>You should also include a second “-r” recipient with your own email address if you want to be able to read the message ever. This is because the message will be encrypted with each person’s public key, and will only be able to be decrypted with the associated private key.</p>

<p>So if it was only encrypted with the other party’s public key, you would not be able to view the message again, unless you somehow obtained their private key. Adding yourself as a second recipient encrypts the message two separate times, one for each recipient.</p>

<h3 id="decrypt-messages">Decrypt Messages</h3>
<p>When you receive a message, simply call GPG on the message file:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg file_name
</code></pre></div></div>

<p>The software will prompt you as necessary.</p>

<p>If you have the message as a raw text stream, you can copy and paste it after you just typing <code class="highlighter-rouge">gpg</code> without any arguments. You can press “CTRL-D” to signify the end of the message and GPG will decrypt it for you.</p>

<h2 id="key-maintenance">Key Maintenance</h2>
<p>There are a number of procedures that you may need to use on a regular basis to manage your key database.</p>

<p>To list your available GPG keys that you have from other people, you can issue this command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--list-keys</span>
</code></pre></div></div>

<p>Your key information can become outdated if you are relying on information pulled from public key servers. You do not want to be relying on revoked keys, because that would mean you are trusting potentially compromised keys.</p>

<p>You can update the key information by issuing:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--refresh-keys</span>
</code></pre></div></div>

<p>This will fetch new information from the key servers.</p>

<p>You can pull information from a specific key server by using:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--keyserver</span> key_server <span class="nt">--refresh-keys</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>
<p>Using GPG correctly can help you secure your communications with different people. This is extremely helpful, especially when dealing with sensitive information, but also when dealing with regular, every day messaging.</p>

<p>Because of the way that certain encrypted communications can be flagged by monitoring programs, it is recommended to use encryption for everything, not just “secret” data. That will make it more difficult for people to know when you are sending important data or just sending a friendly hello.</p>

<p>GPG encryption is only useful when both parties use good security practices and are vigilant about their other security practices. Educate those who you communicate regularly with about the importance of these practices if you want to have the possibility of cryptographically secure communication.</p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/postfix-with-mysql-backend-and-tls</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/postfix-with-mysql-backend-and-tls"/>
    <title>Postfix with MySQL backend and TLS</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2014-02-08T00:00:00+00:00</published>
    <updated>2014-02-08T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>In this tutorial we’ll install a ready to use Postfix mail server with MySql backend for virtual users. Notice that this tutorial only covers installing the SMTP server (not POP3 and IMAP). Click here for a tutorial on installing Courier POP3 and IMAP services.</p>

<p>Once installed and configured, you can easily create your own admin system to modifiy the domains and users because the table structure is very simple.</p>

<p>This tutorial has been tested on Debian etch and lenny</p>

<h3 id="install-the-postfix-mail-server-mysql-server-and-other-required-packages">Install the Postfix mail server, MySql server and other required packages</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>postfix postfix-mysql sasl2-bin libsasl2-modules mysql-client mysql-server libpam-mysql
</code></pre></div></div>

<p>In the configuration wizzard for Postfix select and input the following;</p>

<p>General type of mail configuration <strong>-&gt;</strong> <code class="highlighter-rouge">Internet Site</code></p>

<p>System mail name <strong>-&gt;</strong> <code class="highlighter-rouge">server.domain.com</code> <em>(your server host name)</em></p>

<h3 id="create-a-mysql-database-that-will-contain-domains-and-mappings-and-create-a-user-that-has-read-privileges-on-it">Create a MySql database that will contain domains and mappings and create a user that has read privileges on it</h3>
<p>Execute the following SQL queries to create the table structure:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">domains</span> <span class="p">(</span>
<span class="k">domain</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">63</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
<span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="k">domain</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">MyISAM</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">forwardings</span> <span class="p">(</span>
<span class="n">email</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
<span class="n">destination</span> <span class="nb">text</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
<span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">email</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">MyISAM</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">transport</span> <span class="p">(</span>
<span class="k">domain</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
<span class="n">transport</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
<span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="k">domain</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">MyISAM</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">users</span> <span class="p">(</span>
<span class="n">email</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
<span class="n">password</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
<span class="n">quota</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="nb">unsigned</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">default</span> <span class="s1">'102400'</span><span class="p">,</span>
<span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">email</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">MyISAM</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="populate-tables-with-some-test-data">Populate tables with some test data</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">domains</span> <span class="p">(</span><span class="k">domain</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="n">mydomain</span><span class="p">.</span><span class="n">com</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'address@mydomain.com'</span><span class="p">,</span> <span class="n">ENCRYPT</span><span class="p">(</span><span class="s1">'mypassword'</span><span class="p">));</span>
<span class="n">INESRT</span> <span class="k">INTO</span> <span class="n">forwardings</span> <span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">desination</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'myforward@mydomain.com'</span><span class="p">,</span> <span class="s1">'address@mydomain.com, otheraddress@mydomain.com'</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">transport</span> <span class="p">(</span><span class="k">domain</span><span class="p">,</span> <span class="n">transport</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'transport.com'</span><span class="p">,</span> <span class="s1">'smtp:mail.transport.com'</span><span class="p">);</span>
</code></pre></div></div>

<p>If you want to create a user or forwarding for a domain, you must add it to the domains table. Using the transport table you can forward all mail received to another mail server, when using the transport table you don’t have to add the domain to the domains table.</p>

<h3 id="create-mysql-mappings-for-postfix-replace-mysql_-with-your-mysql-credentials">Create MySql mappings for Postfix. Replace {mysql_*} with your MySql credentials</h3>
<p><code class="highlighter-rouge">nano /etc/postfix/mysql-virtual_domains.cf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosts</span> = {<span class="n">mysql_host</span>}
<span class="n">user</span> = {<span class="n">mysql_username</span>}
<span class="n">password</span> = {<span class="n">mysql_password</span>}
<span class="n">dbname</span> = {<span class="n">mysql_database</span>}
<span class="n">table</span> = <span class="n">domains</span>
<span class="n">select_field</span> = <span class="s1">'virtual'</span>
<span class="n">where_field</span> = <span class="n">domain</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">nano /etc/postfix/mysql-virtual_forwardings.cf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosts</span> = {<span class="n">mysql_host</span>}
<span class="n">user</span> = {<span class="n">mysql_username</span>}
<span class="n">password</span> = {<span class="n">mysql_password</span>}
<span class="n">dbname</span> = {<span class="n">mysql_database</span>}
<span class="n">table</span> = <span class="n">forwardings</span>
<span class="n">select_field</span> = <span class="n">destination</span>
<span class="n">where_field</span> = <span class="n">email</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">nano /etc/postfix/mysql-virtual_mailboxes.cf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosts</span> = {<span class="n">mysql_host</span>}
<span class="n">user</span> = {<span class="n">mysql_username</span>}
<span class="n">password</span> = {<span class="n">mysql_password</span>}
<span class="n">dbname</span> = {<span class="n">mysql_database</span>}
<span class="n">table</span> = <span class="n">users</span>
<span class="n">select_field</span> = <span class="n">CONCAT</span>(<span class="n">SUBSTRING_INDEX</span>(<span class="n">email</span>,<span class="s1">'@'</span>,-<span class="m">1</span>),<span class="s1">'/'</span>,<span class="n">SUBSTRING_INDEX</span>(<span class="n">email</span>,<span class="s1">'@'</span>,<span class="m">1</span>),<span class="s1">'/'</span>)
<span class="n">where_field</span> = <span class="n">email</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">nano /etc/postfix/mysql-virtual_email2email.cf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosts</span> = {<span class="n">mysql_host</span>}
<span class="n">user</span> = {<span class="n">mysql_username</span>}
<span class="n">password</span> = {<span class="n">mysql_password</span>}
<span class="n">dbname</span> = {<span class="n">mysql_database</span>}
<span class="n">table</span> = <span class="n">users</span>
<span class="n">select_field</span> = <span class="n">email</span>
<span class="n">where_field</span> = <span class="n">email</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">nano /etc/postfix/mysql-virtual_transports.cf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosts</span> = {<span class="n">mysql_host</span>}
<span class="n">user</span> = {<span class="n">mysql_username</span>}
<span class="n">password</span> = {<span class="n">mysql_password</span>}
<span class="n">dbname</span> = {<span class="n">mysql_database</span>}
<span class="n">table</span> = <span class="n">transport</span>
<span class="n">select_field</span> = <span class="n">transport</span>
<span class="n">where_field</span> = <span class="n">domain</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">nano /etc/postfix/mysql-virtual_mailbox_limit_maps.cf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosts</span> = {<span class="n">mysql_host</span>}
<span class="n">user</span> = {<span class="n">mysql_username</span>}
<span class="n">password</span> = {<span class="n">mysql_password</span>}
<span class="n">dbname</span> = {<span class="n">mysql_database</span>}
<span class="n">table</span> = <span class="n">users</span>
<span class="n">select_field</span> = <span class="n">quota</span>
<span class="n">where_field</span> = <span class="n">email</span>
</code></pre></div></div>

<h3 id="set-correct-permissions-on-the-newly-created-files-and-allow-postfix-to-read-the-files">Set correct permissions on the newly created files and allow Postfix to read the files</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>640 /etc/postfix/mysql-virtual_<span class="k">*</span>
<span class="nb">chgrp </span>postfix /etc/postfix/mysql-virtual_<span class="k">*</span>
</code></pre></div></div>

<h3 id="create-a-new-user-and-group-named-vmail-all-incoming-mail-will-be-stored-in-this-users-home-directory">Create a new user and group named vmail. All incoming mail will be stored in this users home directory</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>groupadd <span class="nt">-g</span> 5000 vmail
useradd <span class="nt">-g</span> vmail <span class="nt">-u</span> 5000 vmail <span class="nt">-d</span> /home/vmail <span class="nt">-m</span>
</code></pre></div></div>

<h3 id="configure-postfix-to-use-sasl-for-user-authentication-and-tls-for-encryption">Configure Postfix to use SASL for user authentication and TLS for encryption</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postconf <span class="nt">-e</span> <span class="s1">'smtpd_sasl_auth_enable = yes'</span>
postconf <span class="nt">-e</span> <span class="s1">'broken_sasl_auth_clients = yes'</span>
postconf <span class="nt">-e</span> <span class="s1">'smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination'</span>
postconf <span class="nt">-e</span> <span class="s1">'smtpd_use_tls = yes'</span>
postconf <span class="nt">-e</span> <span class="s1">'smtpd_tls_cert_file = /etc/postfix/smtpd.cert'</span>
postconf <span class="nt">-e</span> <span class="s1">'smtpd_tls_key_file = /etc/postfix/smtpd.key'</span>
postconf <span class="nt">-e</span> <span class="s1">'smtpd_sasl_local_domain = $myhostname'</span>
postconf <span class="nt">-e</span> <span class="s1">'smtpd_sasl_security_options = noanonymous'</span>
</code></pre></div></div>

<h3 id="configure-postfix-to-use-the-mysql-database-to-find-virtual-users-where-to-store-mail-and-what-to-do-for-users-over-quota">Configure Postfix to use the MySql database to find virtual users, where to store mail and what to do for users over quota</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postconf <span class="nt">-e</span> <span class="s1">'virtual_alias_domains ='</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_alias_maps = proxy:mysql:/etc/postfix/mysql-virtual_forwardings.cf, mysql:/etc/postfix/mysql-virtual_email2email.cf'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_mailbox_domains = proxy:mysql:/etc/postfix/mysql-virtual_domains.cf'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_mailbox_maps = proxy:mysql:/etc/postfix/mysql-virtual_mailboxes.cf'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_mailbox_base = /home/vmail'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_uid_maps = static:5000'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_gid_maps = static:5000'</span>
postconf <span class="nt">-e</span> <span class="s1">'transport_maps = proxy:mysql:/etc/postfix/mysql-virtual_transports.cf'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_create_maildirsize = yes'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_mailbox_extended = yes'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_mailbox_limit_maps = proxy:mysql:/etc/postfix/mysql-virtual_mailbox_limit_maps.cf'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_mailbox_limit_override = yes'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_maildir_limit_message = "The user you are trying to reach is over quota."'</span>
postconf <span class="nt">-e</span> <span class="s1">'virtual_overquota_bounce = yes'</span>
postconf <span class="nt">-e</span> <span class="s1">'proxy_read_maps = $local_recipient_maps $mydestination $virtual_alias_maps $virtual_alias_domains $virtual_mailbox_maps $virtual_mailbox_domains $relay_recipient_maps $relay_domains $canonical_maps $sender_canonical_maps $recipient_canonical_maps $relocated_maps $transport_maps $mynetworks $virtual_mailbox_limit_maps'</span>
</code></pre></div></div>

<h3 id="create-a-self-signed-certificate-to-encrypt-connections">Create a self signed certificate to encrypt connections</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-new</span> <span class="nt">-outform</span> PEM <span class="nt">-out</span> /etc/postfix/smtpd.cert <span class="nt">-newkey</span> rsa:2048 <span class="nt">-nodes</span> <span class="nt">-keyout</span> /etc/postfix/smtpd.key <span class="nt">-keyform</span> PEM <span class="nt">-days</span> 3650 <span class="nt">-x509</span>
<span class="nb">chmod </span>640 /etc/postfix/smtpd.key
</code></pre></div></div>

<h3 id="make-postfix-listen-on-port-465-for-secure-smtp-connections">Make Postfix listen on port 465 for secure smtp connections</h3>
<p><code class="highlighter-rouge">nano /etc/postfix/master.cf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">smtps</span> <span class="n">inet</span> <span class="n">n</span> - - - - <span class="n">smtpd</span>
-<span class="n">o</span> <span class="n">smtpd_tls_wrappermode</span>=<span class="n">yes</span>
-<span class="n">o</span> <span class="n">smtpd_sasl_auth_enable</span>=<span class="n">yes</span>
-<span class="n">o</span> <span class="n">smtpd_client_restrictions</span>=<span class="n">permit_sasl_authenticated</span>,<span class="n">reject</span>
</code></pre></div></div>

<h3 id="force-sasl-to-store-the-pid-files-in-a-location-where-postfix-can-read-them">Force SASL to store the PID files in a location where Postfix can read them</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> /var/spool/postfix/var/run/saslauthd
</code></pre></div></div>

<p>Edit SASL config to enable the daemon and make it use the new PID file location (<code class="highlighter-rouge">nano /etc/default/saslauthd</code>)</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">START</span>=<span class="n">yes</span>
<span class="n">OPTIONS</span>=<span class="s2">"-c -m /var/spool/postfix/var/run/saslauthd -r"</span>
</code></pre></div></div>

<p>Edit the init file for SASL (<code class="highlighter-rouge">nano /etc/init.d/saslauthd</code>)</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PIDFILE</span>=<span class="s2">"/var/spool/postfix/var/run/${NAME}/saslauthd.pid"</span>
</code></pre></div></div>

<h3 id="insert-mysql-credentials-for-pam-nano-etcpamdsmtp">Insert MySql credentials for PAM (nano /etc/pam.d/smtp)**</h3>
<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">auth</span> <span class="n">required</span> <span class="n">pam_mysql</span>.<span class="n">so</span> <span class="n">user</span>={<span class="n">mysql_username</span>} <span class="n">passwd</span>={<span class="n">mysql_password</span>} <span class="n">host</span>={<span class="n">mysql_host</span>} <span class="n">db</span>={<span class="n">mysql_database</span>} <span class="n">table</span>=<span class="n">users</span> <span class="n">usercolumn</span>=<span class="n">email</span> <span class="n">passwdcolumn</span>=<span class="n">password</span> <span class="n">crypt</span>=<span class="m">1</span>
<span class="n">account</span> <span class="n">sufficient</span> <span class="n">pam_mysql</span>.<span class="n">so</span> <span class="n">user</span>={<span class="n">mysql_username</span>} <span class="n">passwd</span>={<span class="n">mysql_password</span>} <span class="n">host</span>={<span class="n">mysql_host</span>} <span class="n">db</span>={<span class="n">mysql_database</span>} <span class="n">table</span>=<span class="n">users</span> <span class="n">usercolumn</span>=<span class="n">email</span> <span class="n">passwdcolumn</span>=<span class="n">password</span> <span class="n">crypt</span>=<span class="m">1</span>
</code></pre></div></div>

<h3 id="config-sasl-for-postfix-and-specify-mysql-credentials">Config SASL for Postfix and specify MySql credentials</h3>
<p><code class="highlighter-rouge">nano /etc/postfix/sasl/smtpd.conf</code></p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pwcheck_method</span>: <span class="n">saslauthd</span>
<span class="n">mech_list</span>: <span class="n">plain</span> <span class="n">login</span>
<span class="n">allow_plaintext</span>: <span class="n">true</span>
<span class="n">auxprop_plugin</span>: <span class="n">mysql</span>
<span class="n">sql_hostnames</span>: {<span class="n">mysql_host</span>}
<span class="n">sql_user</span>: {<span class="n">mysql_username</span>}
<span class="n">sql_passwd</span>: {<span class="n">mysql_password</span>}
<span class="n">sql_database</span>: {<span class="n">mysql_database</span>}
<span class="n">sql_select</span>: <span class="n">select</span> <span class="n">password</span> <span class="n">from</span> <span class="n">users</span> <span class="n">where</span> <span class="n">email</span> = <span class="s1">'%u'</span>
</code></pre></div></div>

<h3 id="add-the-postfix-user-to-the-sasl-group-allowing-postfix-to-communicate-with-sasl">Add the Postfix user to the SASL group allowing Postfix to communicate with SASL</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adduser postfix sasl
</code></pre></div></div>

<h3 id="restart-postfix-and-sasl">Restart Postfix and SASL</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/init.d/postfix restart
/etc/init.d/saslauthd restart
</code></pre></div></div>

<p>You’re all done. Now you can connect to ports 25 and 465 to sent mails to your virtual users specified in the MySql database. When authenticating with your e-mail client, use the full e-mail address as the username.</p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/clean-urls-with-jekyll-apache</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/clean-urls-with-jekyll-apache"/>
    <title>Clean URLs with Jekyll/Apache</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2014-02-01T00:00:00+00:00</published>
    <updated>2014-02-01T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>Yesterday I decided to shorten and clear the urls of my posts once and for all. By clean, I mean short and simple urls without dates, categories or anything else in them, only the post slug. My definition of cleanness also includes <strong>not</strong> having a slash at the end of the urls. For example, <code class="highlighter-rouge">groveld.com/about</code>.</p>

<p>To view options available when setting the permalink structure of posts in jekyll, you can take a look at the <a href="http://jekyllrb.com/docs/permalinks/">documentation</a>, but for our purpose, it’s so simple and you might have already guessed it without looking at the docs: <code class="highlighter-rouge">permalink: /:title</code></p>

<p>You have to put the above line in the <code class="highlighter-rouge">_config.yml</code> file in the root directory of your jekyll project.</p>

<p>If you have pagination, the permalink for the pagination could be as simple as <code class="highlighter-rouge">paginate_path: "page/:num"</code></p>

<p>Now the tricky and more exciting part, which is telling apache to remove the trailing slashes! Here’s how I did it, with this htaccess configuartion:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Options -Multiviews +FollowSymLinks
RewriteEngine On
RewriteBase /
DirectorySlash Off

# remove the trailing slash
RewriteRule ^(.*)\/(\?.*)?$ $1$2 [R=301,L]

# rewrite /dir/file to /dir/file/index.html
RewriteRule ^([\w\/-]+)(\?.*)?$ $1/index.html$2 [L,T=application/x-httpd-html]
</code></pre></div></div>

<div class="alert alert-warning" role="alert"><strong>Disclaimer:</strong> By no means I'm an expert in writing .htaccess files! But, it's working as I expect it to do. Note that it also passes the queries (if there are any).</div>

<p>We’re done! but there’s one more thing I’d like to mention:</p>

<p>In this approach, jekyll creates a directory for each post, which in my opinion is not very nice. The solution for that will be to tell jekyll to create all posts as html files in some directory, like <code class="highlighter-rouge">blog</code> and then have Apache load the actual file for each post from the <code class="highlighter-rouge">blog</code> folder. However, if you try this, you’ll realize that jekyll always creates the paginations in folder structure (<code class="highlighter-rouge">/page/2/index.html</code>) and there’s no easy way to make it create html files (<code class="highlighter-rouge">/page/2.html</code>), and therefore that’ll messup our htaccess url rewrite. Now, if you have a decent knowledge of <a href="http://regex.learncodethehardway.org/">regex</a>, then you’re fine and you can separate blog posts from paginations, but that’s not the case for me :p, so this is as far as I will go.</p>

<p>I also thought it might be useful to link to <a href="http://andrewho.co.uk/weblog/clean-urls-on-jekyll-apache">this article</a>; although I didn’t use it myself and I only found it after doing what I just described in this post.</p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/what-it-really-means-to-hack</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/what-it-really-means-to-hack"/>
    <title>What it really means to Hack</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2014-01-18T00:00:00+00:00</published>
    <updated>2014-01-18T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>I once mentioned it to a classmate that I use GNU/Linux as the only Operating System at home, and he replied in shock, “That’s used by <em>Hackers</em>? Right?”
That is true. Almost everyone who calls himself/herself a Hacker uses it, but the fear on his face suggested that he meant to say <em>Crackers</em>.
Noooo! Linux users aren’t <em>Crackers</em>. That would be similar to saying that everyone who owns a slide hammer, is a car thief!</p>

<p>Thinking out-of-the-box or using some tool in a way it isn’t meant to be used, just for fun and exploration can be called “hacking”.
But try telling someone that you are a hacker, and they would look at you with surprise and suspicion.
Because for them, hackers are those who seek for vulnerabilites and exploits in a computer system or a computer network. (whom I call <em>Crackers</em>)</p>

<p>Hacking means exhibiting playful cleverness, which can be using an optical mouse as a barcode scanner, or walking the wrong direction on an escalator.
It isn’t even nescessarily related to programming, leave alone breaking into computers.</p>

<p>The term “Hacker” has lost its original meaning.
The difference between the two terms is: Hackers make stuff, Crackers break it.
All the journalists and writers, please note the difference. You are the main reason of this confusion.</p>

<p>I keep pursuing people to switch to Linux because it is Free and Open Source, but what really made me stick to Linux was the fact that I like to tinker with my system. I like to play around, break stuff, and spend the whole night fixing it.
I like to reboot my computer while the system updates are being applied, just to see if that breaks my setup. <strong>That’s really what Hacking is all about</strong>.
(Although the last example was suicidal on my laptop :P, but Hacking doesn’t need to fulfil a purpose. It only needs to be fun :D)</p>

<p>And hacking isn’t only about doing awesome stuff, it is also about sharing it with the community, and collaborating with like minded people.
See <a href="https://en.wikipedia.org/wiki/Hacker_ethic">Hacker ethics</a>.</p>

<p>The hacker culture shares its roots with the <a href="http://fsf.org">Free Software</a>, the <a href="http://opensource.org">Open Source</a> and the <a href="http://linuxfoundation.org">Linux</a> culture.
These cultures overlap so much, that to much extent, they are the same. <a href="http://www.catb.org/~esr/faqs/hacker-howto.html#what_is">[ref]</a>
Hackers are the people who provided the backbone to the World Wide Web, as we know it today. They invented Unix.
They resurrected the lost principle of sharing and collaborating code. They proved that <em>given enough eyeballs, all bugs are shallow</em>.</p>

<p>Here are a few sources from very influential people in the Hacker community, which inspired this post:
Richard Stallman’s post <a href="https://stallman.org/articles/on-hacking.html">On Hacking</a>
Eric Raymond’s <a href="http://www.catb.org/~esr/faqs/hacker-howto.html">How To Become A Hacker</a>
and the <a href="https://en.wikipedia.org/wiki/Hacker_%28programmer_subculture%29">Wikipedia Article</a> on Hacker subculture.</p>

<p>Happy Hacking!</p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/teamspeak-3-server-on-debian-ubuntu</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/teamspeak-3-server-on-debian-ubuntu"/>
    <title>TeamSpeak 3 server on Debian/Ubuntu</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2013-11-16T00:00:00+00:00</published>
    <updated>2013-11-16T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>It has been a long time since my last post – I’m sorry for that but I didn’t have the time. Anyway I just installed TeamSpeak 3 on a Ubuntu 10.04 for a friend and want to share that info. Getting TeamSpeak running is mostly not the problem but you don’t want to start it after every boot by hand or run it as root. This Howto shows what I did. I assume that all user actions shown in this howto are performed as root or after executing sudo bash.</p>

<p>First you need to create a user under which the TeamSpeak server should run by executing following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adduser <span class="nt">--disabled-login</span> teamspeak
</code></pre></div></div>

<p>Now we need to get the software (64bit in my case)
<em>(Take a look if a new version is out when you install your server)</em></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget http://ftp.4players.de/pub/hosted/ts3/releases/beta-22/teamspeak3-server_linux-amd64-3.0.0-beta22.tar.gz
</code></pre></div></div>

<p>and extract it</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>xzf teamspeak3-server_linux-amd64-3.0.0-beta22.tar.gz
</code></pre></div></div>

<p>We move it to a nice place with</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv </span>teamspeak3-server_linux-amd64 /opt/ts3
</code></pre></div></div>

<p>and give it to the user teamspeak</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chown</span> <span class="nt">-R</span> teamspeak /opt/ts3
</code></pre></div></div>

<p>If you take a look into the /opt/ts3 directory you’ll see that there is a already a start/stop script (ts3server_startscript.sh), we will utilize it. Create a init.d file with pasting the content after executing <code class="highlighter-rouge">cat &gt; /etc/init.d/teamspeak</code> :</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/sh</span>
<span class="c">### BEGIN INIT INFO</span>
<span class="c"># Provides:          teamspeak</span>
<span class="c"># Required-Start:    networking</span>
<span class="c"># Required-Stop:</span>
<span class="c"># Default-Start:     2 3 4 5</span>
<span class="c"># Default-Stop:      S 0 1 6</span>
<span class="c"># Short-Description: TeamSpeak Server Daemon</span>
<span class="c"># Description:       Starts/Stops/Restarts the TeamSpeak Server Daemon</span>
<span class="c">### END INIT INFO</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
<span class="nv">DESC</span><span class="o">=</span><span class="s2">"TeamSpeak Server"</span>
<span class="nv">NAME</span><span class="o">=</span>teamspeak
<span class="nv">USER</span><span class="o">=</span>teamspeak
<span class="nv">DIR</span><span class="o">=</span>/opt/ts3
<span class="nv">DAEMON</span><span class="o">=</span><span class="nv">$DIR</span>/ts3server_startscript.sh
<span class="c">#PIDFILE=/var/run/$NAME.pid</span>
<span class="nv">SCRIPTNAME</span><span class="o">=</span>/etc/init.d/<span class="nv">$NAME</span>

<span class="c"># Gracefully exit if the package has been removed.</span>
<span class="nb">test</span> <span class="nt">-x</span> <span class="nv">$DAEMON</span> <span class="o">||</span> <span class="nb">exit </span>0

<span class="nb">cd</span> <span class="nv">$DIR</span>
<span class="nb">sudo</span> <span class="nt">-u</span> teamspeak ./ts3server_startscript.sh <span class="nv">$1</span>
</code></pre></div></div>

<p>Now press ENTER and CTRL-D and you’ve inserted the content into the file. Set the permission correctly with</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>755 /etc/init.d/teamspeak
</code></pre></div></div>

<p>and now you can try it out by calling</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/init.d/teamspeak start
</code></pre></div></div>

<p>Take note of the login and token as you will need them later. You can also look for them in the log files in /opt/ts3/logs/. The last thing you need to do now is to make sure the init script is executed at boot time by using following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>update-rc.d teamspeak defaults
</code></pre></div></div>

<p>At last if you’ve a firewall running on your system you need to make sure that you open all your ports. To find out which ports are used by teamspeak use following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># netstat -lnp | grep ts3</span>
tcp        0      0 0.0.0.0:10011           0.0.0.0:<span class="k">*</span>               LISTEN      30232/ts3server_lin
tcp        0      0 0.0.0.0:30033           0.0.0.0:<span class="k">*</span>               LISTEN      30232/ts3server_lin
udp        0      0 0.0.0.0:9987            0.0.0.0:<span class="k">*</span>                           30232/ts3server_lin
</code></pre></div></div>

<p>I hope this howto helped someone and write a comment if you found an error or a better way to do something. Now you just need to point your TeamSpeak client to the server and go to the menu entry “permissions -&gt; use token” and copy and past the token from above into the edit box. (only insert the chars behind “token=”)</p>
 ]]></content>
  </entry>
  
  <entry>
    <id>https://www.groveld.com/articles/ohm2013-observe-hack-make</id>
    <link rel="alternate" type="text/html" href="https://www.groveld.com/articles/ohm2013-observe-hack-make"/>
    <title>OHM2013. Observe, Hack, Make</title>
    <author>
      <name>groveld</name>
      <email>martin@groveld.com</email>
    </author>
    <published>2013-06-08T00:00:00+00:00</published>
    <updated>2013-06-08T00:00:00+00:00</updated>
    <content type="html"><![CDATA[ <p>OHM2013. Observe, Hack, Make. A five day outdoor international camping festival for hackers and makers, and those with an inquisitive mind. On 31st July 2013, 3000 of those minds will descend upon on an unassuming patch of land, at the Geestmerambacht festival grounds, 30km north of Amsterdam.</p>

<h2 id="about-ohm2013">About OHM2013</h2>

<p>OHM2013 – Observe. Hack. Make. is a 5-day international outdoor technology and security conference. OHM2013 is currently requesting proposals for content.</p>

<p>A motley bunch of around 3000 hackers, free-thinkers, philosophers, activists, geeks, scientists, artists, creative minds and others will convene from all over the world for this informal meeting of minds to contemplate, reflect, share, criticize, look ahead, code, build, and more.</p>

<p>An otherwise unassuming stretch of land, just 30km (20mi) North of Amsterdam, will be transformed into a colourful oasis of light providing a backdrop for this unique event. It is an immersive experience, with an emphasis on interaction.</p>

<p>The four-yearly Dutch hacker camps provide a very open, friendly and relaxed atmosphere, with a high level of knowledge. The campsite is buzzing with energy, ideas and projects, not least because people from various backgrounds are interacting. It is a non-commercial community event where every visitor is also a volunteer.</p>

<h2 id="background">Background</h2>

<p>OHM 2013 is the 7th edition in this line of events. The seed for these events sprouted in the late 80’s hacker community embodied by ‘Hippies from Hell’ and the journal for techno-anarchists ‘Hack-tic’.</p>

<p>In 1989 the Galactic Hacker Party was held at Paradiso, a public forum in Amsterdam. This indoor event brought together pioneers at the frontiers of the internet to revel in the upcoming revolution, but also to be critical of the power structures governing the then infant internet and its impact on society.</p>

<p>In 1993, four years later, Hacking at the End of the Universe was the first open-air event in the series. Several hundred hackers set up camp in the outdoors. While the internet was still not something many people had at home, the whole campsite was already connected.</p>

<p>The landscape has changed much since 1989. New trends raise questions of security, governance, sustainability and identity. The notion of hacking – to use something in a creative way, not thought of when it was first invented – has long spread to fields outside of Information Technology. The concepts of open source and open standards are now commonplace.</p>

<p>At the same time, society is more and more dependent on technology. Blind faith in ICT in particular leads to erosion of democratic principles and human rights. Society increasingly depends on hackers to act as its conscience on these matters.</p>

<p>Now nearly every household has a connection to the internet, it is also becoming a conduit for click-to-manufacture designs. Hackers expand their focus towards “manufacturing at home” collaboration projects using home-built 3D printers, CNC-machines and laser cutters. A necessity as current economic models are collapsing, both on the macro as well as the micro scale. The post-industrial global society is on the verge of depleting both its financial capital as well as its natural resources. Logistic chains feeding the factories that produce all our gadgets and even our food span multiple continents. Despite the global scale, those chains are fragile. When energy is becoming sparse, the global transport routes will fail to be economically feasible.</p>

<p>Hackers can apply their critical curiosity and creativity to bring about methods to cope with the upcoming changes. By building, for example, resilient means of electronic communication to ease the transition to an era where cheap Chinese gadgets and Japanese electronics can no longer be taken for granted and by arming society against authorities taking mobile telephony and the internet offline in times of crisis. But perhaps even more important is going back to the basics of production itself. Traditional crafts may become a matter of survival when factories sourcing raw materials from far away are a thing of the past.</p>
 ]]></content>
  </entry>
  
</feed>
